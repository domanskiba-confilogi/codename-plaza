"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["ts\n// Types\ninterface LoggedInUser {\n  // shape of your logged-in user object; adapt as needed\n  [key: string]: unknown;\n}\n\ntype GetLoggedInUserResult =\n  | { ok: LoggedInUser; unauthorizedError: null; unknownError: null }\n  | { ok: null; unauthorizedError: string; unknownError: null }\n  | { ok: null; unauthorizedError: null; unknownError: string };\n\ninterface ApiConnector {\n  getLoggedInUser(): Promise<GetLoggedInUserResult>;\n}\n\ninterface AuthStore {\n  getAuthorizationToken(): string | null;\n  setLoggedInUser(token: string | null, user: LoggedInUser | null): void;\n}\n\ninterface ModalAction {\n  label: string;\n  onClick: (event: unknown, api: unknown) => void;\n}\n\ninterface ModalOptions {\n  title: string;\n  contentHtml: string;\n  primaryAction: ModalAction;\n}\n\ninterface ModalInstance {\n  open(): void;\n}\n\n// External functions provided elsewhere in your codebase\ndeclare function createApiConnector(): ApiConnector;\ndeclare function mountModal(selector: string, options: ModalOptions): ModalInstance;\n\n// Code\nexport async function checkIsLoggedInMiddleware(authStore: AuthStore): Promise<void> {\n  const apiConnector = createApiConnector();\n  const result = await apiConnector.getLoggedInUser();\n\n  if (result.unauthorizedError !== null) {\n    window.location.href = '/sign-in.html';\n  } else if (result.ok !== null) {\n    authStore.setLoggedInUser(authStore.getAuthorizationToken(), result.ok);\n  } else {\n    const errorModal = mountModal('#error-modal-root', {\n      title: 'A critical error occured',\n      contentHtml: "], ["ts\n// Types\ninterface LoggedInUser {\n  // shape of your logged-in user object; adapt as needed\n  [key: string]: unknown;\n}\n\ntype GetLoggedInUserResult =\n  | { ok: LoggedInUser; unauthorizedError: null; unknownError: null }\n  | { ok: null; unauthorizedError: string; unknownError: null }\n  | { ok: null; unauthorizedError: null; unknownError: string };\n\ninterface ApiConnector {\n  getLoggedInUser(): Promise<GetLoggedInUserResult>;\n}\n\ninterface AuthStore {\n  getAuthorizationToken(): string | null;\n  setLoggedInUser(token: string | null, user: LoggedInUser | null): void;\n}\n\ninterface ModalAction {\n  label: string;\n  onClick: (event: unknown, api: unknown) => void;\n}\n\ninterface ModalOptions {\n  title: string;\n  contentHtml: string;\n  primaryAction: ModalAction;\n}\n\ninterface ModalInstance {\n  open(): void;\n}\n\n// External functions provided elsewhere in your codebase\ndeclare function createApiConnector(): ApiConnector;\ndeclare function mountModal(selector: string, options: ModalOptions): ModalInstance;\n\n// Code\nexport async function checkIsLoggedInMiddleware(authStore: AuthStore): Promise<void> {\n  const apiConnector = createApiConnector();\n  const result = await apiConnector.getLoggedInUser();\n\n  if (result.unauthorizedError !== null) {\n    window.location.href = '/sign-in.html';\n  } else if (result.ok !== null) {\n    authStore.setLoggedInUser(authStore.getAuthorizationToken(), result.ok);\n  } else {\n    const errorModal = mountModal('#error-modal-root', {\n      title: 'A critical error occured',\n      contentHtml: "]));
$;
{
    result.unknownError;
}
",\n      primaryAction: {\n        label: 'Refresh page',\n        onClick: () => {\n          window.location.reload();\n        },\n      },\n    });\n    errorModal.open();\n    throw result.unknownError;\n  }\n}\n\nexport async function checkIsGuestMiddleware(authStore: AuthStore): Promise<void> {\n  const apiConnector = createApiConnector();\n  const result = await apiConnector.getLoggedInUser();\n\n  if (result.ok !== null) {\n    window.location.href = '/';\n  } else if (result.unauthorizedError !== null) {\n    authStore.setLoggedInUser(null, null);\n  } else {\n    const errorModal = mountModal('#error-modal-root', {\n      title: 'A critical error occured',\n      contentHtml: ";
$;
{
    result.unknownError;
}
",\n      primaryAction: {\n        label: 'Refresh page',\n        onClick: () => {\n          window.location.reload();\n        },\n      },\n    });\n    errorModal.open();\n    throw result.unknownError;\n  }\n}\n"(__makeTemplateObject([""], [""]));
